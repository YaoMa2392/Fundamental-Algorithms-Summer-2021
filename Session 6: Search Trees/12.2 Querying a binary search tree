1. Searching

我们使用下面的过程在一棵二叉搜索树种查找一个具有给定关键字的结点。输入一个指向树根的指针和一个关键字k，如果这个结点存在，TREE-SEARCH返回一个指向关键字为k的结点的指针；否则返回NIL。

TREE-SEARCH(x, k)
    if x == NIL or k == x.key
        return x
    if k < x.key
        return TREE-SEARCH(x.left, k)
    else
        return TREE-SEARCH(x.right, k)
        

while循环递归：

ITERATIVE-TREE-SEARCH(x, k)
    while x != NIL and k != x.key
        if k < x.key
            x = x.left
        else
            x = x.right
    return x
    
-----------------------------------------------

2. Minimum and maximum

// 最小key一定在最后一个左子树上
TREE-MINIMUM(x)
    while x.left != NIL
        x = x.left
    return x

// 最大key一定在最后一个右子树上
TREE-MAXIMUM(x)
    while x.right != NIL
        x = x.right
    return x


MINIMUM 和 MAXIMUM 的递归版本：

IETRATIVE-TREE-MINIMUM(x)
    if x.left != NIL
        return ITERATIVE-TREE-MINIMUM(x.left)
    return x


ITERATIVE-TREE-MAXIMUM(x)
    if x.right != NIL
        return ITERATIVE-TREE-MAXIMUM(x.right)
    return x
-----------------------------------------------

3. Successor and predecessor

// 如果所有关键字互不相同，则一个结点x的后继是大于x.key的最小关键字的结点
TREE-SUCCESSOR(x)
    //如果x结点的右子树非空，那么x的后继恰是x右子树中的最左结点（中序）
    if x.right != NIL
        return TREE-MINIMUM(x.right)     

    // 如果结点x的右子树为空并有一个后继y，那么y就是x的最底层祖先
    y = x.p
    while y != NIL and x == y.right
        x = y
        y = y.p 
    return y
   


TREE-PREDECESSOR(x)
    if x.left != NIL
        return TREE-MAXIMUM(x.left)
    y = x.p
    while y != NIL and x == y.left
        x = y
        y = y.p 
    return y
    
-----------------------------------------------

定理12.2  在一棵高度为h的二叉搜索树上，动态集合上的操作 SEARCH、MINIMUM、MAXIMUM、SUCCESSOR、PREDECESSOR 可以在 O(h)时间内完成。

-----------------------------------------------

练习：

12.2-1 假设
