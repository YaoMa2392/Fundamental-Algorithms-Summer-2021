*The key in a binary search tree are always stored in such a way as to satisfy the binary-search-tree property:
Let x be a node in a binary search tree. If y is a node in the left subtree of x, then y.key <= x.key. If y is a node in the right subtree of x, then y.key >= x.key.
// 左孩子不大于根结点，右孩子不小于根结点 （可以等于）。

------------------------------------------------------------------------------------

3种遍历方法（以根结点在哪个位置命名）：
1. Inorder tree walk  中序遍历:  左 - 根 - 右
2. Preorder tree walk  前序遍历：  根 - 左 - 右
3. Postorder tree walk  后序遍历：  左 - 右 - 根

INORDER-TREE-WALK(x)
    if x != NIL
        INORDER-TREE-WALK(x.left)
        print x.key
        INORDER-TREE-WALK(x.right)

*定理12.1  如果x是一棵有n个结点子树的根，那么调用INORDER-TREE-WALK(x)需要Theta(n)时间

------------------------------------------------------------------------------------

        树的高度、深度、层
                              高度  深度  层
              A                2     0    1
          B       C            1     1    2
       D    E   F    G         0     2    3

—————————————————————————————————————————————————————————————————————————————————————

练习：

√ 12.1-1  对于关键字集合{1， 4， 5， 10， 16， 17， 21}， 分别画出高度为2、3、4、5和6的二叉搜索树。
  12.1-1
  
12.1-2  二叉搜索树性质于最小堆性质（见6.1节）之间有什么不同？能使用最小堆性质在O(n)时间内按序输出一棵有n个结点树的关键字吗？可以的话，请说明如何做，否则解释理由。

12.1-3

12.1-4

12.1-5  因为在基于比较的排序模型中，完成n个元素的排序，其最坏情况下需要 Omega(n lgn)时间。试证明：任何

